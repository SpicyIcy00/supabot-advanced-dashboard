[
  {
    "question": "sales per hour total of all stores and all dates",
    "sql": "SELECT \n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM') as hour,\n    COUNT(DISTINCT t.ref_id) as num_transactions,\n    SUM(ti.item_total) as total_sales\nFROM transactions t\nJOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\nWHERE t.transaction_type = 'sale' AND t.is_cancelled = FALSE\nGROUP BY EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila')), \n         TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM')\nORDER BY total_sales DESC;",
    "feedback": "correct",
    "explanation": "Groups ONLY by hour, sums across ALL stores and ALL dates. No store-level grouping.",
    "timestamp": "2025-07-03T17:06:39.728287"
  },
  {
    "question": "what hours have the best sales",
    "sql": "SELECT \n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM') as hour,\n    COUNT(DISTINCT t.ref_id) as num_transactions,\n    SUM(ti.item_total) as total_sales\nFROM transactions t\nJOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\nWHERE t.transaction_type = 'sale' AND t.is_cancelled = FALSE\nGROUP BY EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila')), \n         TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM')\nORDER BY total_sales DESC;",
    "feedback": "correct",
    "explanation": "Aggregates total sales by hour across all stores and dates. Single level grouping.",
    "timestamp": "2025-07-03T17:06:39.728293"
  },
  {
    "question": "sales by store per hour",
    "sql": "SELECT \n    s.store_name,\n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM') as hour,\n    COUNT(DISTINCT t.ref_id) as num_transactions,\n    SUM(ti.item_total) as total_sales\nFROM transactions t\nJOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\nJOIN stores s ON s.store_id = t.store_id\nWHERE t.transaction_type = 'sale' AND t.is_cancelled = FALSE\nGROUP BY s.store_name, \n         EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila')), \n         TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM')\nORDER BY s.store_name, total_sales DESC;",
    "feedback": "correct",
    "explanation": "Groups by BOTH store AND hour when breaking down by store. Different from total across all stores.",
    "timestamp": "2025-07-03T17:06:39.728296"
  },
  {
    "question": "sales total per hour total of all stores and all dates",
    "sql": "SELECT \n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM') as hour,\n    COUNT(DISTINCT t.ref_id) as num_transactions,\n    SUM(ti.item_total) as total_sales\nFROM transactions t\nJOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\nWHERE t.transaction_type = 'Sale' AND t.is_cancelled = FALSE\nGROUP BY EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila')), \n         TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM')\nORDER BY total_sales DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-03T17:08:43.583740"
  },
  {
    "question": "sales total per hour total of all stores and all dates per each day, monday, tuesday etc",
    "sql": "SELECT \n    TO_CHAR(DATE_TRUNC('day', t.transaction_time AT TIME ZONE 'Asia/Manila'), 'Day') AS day_of_week,\n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM') AS hour,\n    COUNT(DISTINCT t.ref_id) AS num_transactions,\n    SUM(ti.item_total) AS total_sales\nFROM transactions t\nJOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\nWHERE t.transaction_type = 'Sale' AND t.is_cancelled = FALSE\nGROUP BY \n    DATE_TRUNC('day', t.transaction_time AT TIME ZONE 'Asia/Manila'),\n    TO_CHAR(DATE_TRUNC('day', t.transaction_time AT TIME ZONE 'Asia/Manila'), 'Day'),\n    EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila')),\n    TO_CHAR((t.transaction_time AT TIME ZONE 'Asia/Manila'), 'HH12:00 AM')\nORDER BY \n    EXTRACT(DOW FROM DATE_TRUNC('day', t.transaction_time AT TIME ZONE 'Asia/Manila')),\n    EXTRACT(HOUR FROM (t.transaction_time AT TIME ZONE 'Asia/Manila'));",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-03T17:10:21.569426"
  },
  {
    "question": "what's my profit margin by product category?",
    "sql": "WITH sales_data AS (\n    SELECT \n        p.category,\n        p.unit_price,\n        p.cost,\n        ti.quantity\n    FROM transaction_items ti\n    JOIN products p ON ti.product_id = p.id\n    JOIN transactions t ON ti.transaction_ref_id = t.ref_id\n    WHERE t.transaction_type = 'Sale' \n    AND (t.is_cancelled IS NULL OR t.is_cancelled = false)\n    AND p.unit_price IS NOT NULL \n    AND p.cost IS NOT NULL\n),\ncategory_metrics AS (\n    SELECT \n        category,\n        SUM(quantity * unit_price) as total_revenue,\n        SUM(quantity * cost) as total_cost,\n        SUM(quantity * (unit_price - cost)) as total_profit\n    FROM sales_data\n    GROUP BY category\n)\nSELECT \n    category,\n    total_revenue,\n    total_cost,\n    total_profit,\n    CASE \n        WHEN total_revenue > 0 THEN ROUND((total_profit / total_revenue * 100), 2)\n        ELSE 0\n    END as profit_margin_percent\nFROM category_metrics\nWHERE total_revenue > 0\nORDER BY profit_margin_percent DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-04T11:55:58.856721"
  },
  {
    "question": "sales per store this thursday compared to last thursday",
    "sql": "WITH thursday_dates AS (\n    SELECT \n        MAX(CASE WHEN EXTRACT(DOW FROM DATE(transaction_time AT TIME ZONE 'Asia/Manila')) = 4 THEN DATE(transaction_time AT TIME ZONE 'Asia/Manila') END) AS this_thursday,\n        MAX(CASE WHEN EXTRACT(DOW FROM DATE(transaction_time AT TIME ZONE 'Asia/Manila')) = 4 AND DATE(transaction_time AT TIME ZONE 'Asia/Manila') < (SELECT MAX(CASE WHEN EXTRACT(DOW FROM DATE(transaction_time AT TIME ZONE 'Asia/Manila')) = 4 THEN DATE(transaction_time AT TIME ZONE 'Asia/Manila') END) FROM transactions) THEN DATE(transaction_time AT TIME ZONE 'Asia/Manila') END) AS last_thursday\n    FROM transactions\n),\nthis_thursday_sales AS (\n    SELECT \n        s.name as store_name,\n        SUM(ti.item_total) as sales_amount\n    FROM transactions t\n    JOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN thursday_dates td\n    WHERE t.transaction_type = 'Sale' \n        AND t.is_cancelled = FALSE\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = td.this_thursday\n    GROUP BY s.name\n),\nlast_thursday_sales AS (\n    SELECT \n        s.name as store_name,\n        SUM(ti.item_total) as sales_amount\n    FROM transactions t\n    JOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN thursday_dates td\n    WHERE t.transaction_type = 'Sale' \n        AND t.is_cancelled = FALSE\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = td.last_thursday\n    GROUP BY s.name\n)\nSELECT \n    COALESCE(ts.store_name, ls.store_name) as store_name,\n    COALESCE(ts.sales_amount, 0) as this_thursday_sales,\n    COALESCE(ls.sales_amount, 0) as last_thursday_sales,\n    COALESCE(ts.sales_amount, 0) - COALESCE(ls.sales_amount, 0) as sales_difference,\n    CASE \n        WHEN COALESCE(ls.sales_amount, 0) = 0 THEN NULL\n        ELSE ROUND(((COALESCE(ts.sales_amount, 0) - COALESCE(ls.sales_amount, 0)) / ls.sales_amount) * 100, 2)\n    END as percent_change\nFROM this_thursday_sales ts\nFULL OUTER JOIN last_thursday_sales ls ON ts.store_name = ls.store_name\nORDER BY sales_difference DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-04T12:31:46.730634"
  },
  {
    "question": "average transactions value per store",
    "sql": "SELECT \n    s.name as store_name,\n    COUNT(DISTINCT t.ref_id) as total_transactions,\n    COALESCE(SUM(t.total), 0) as total_sales,\n    CASE \n        WHEN COUNT(DISTINCT t.ref_id) = 0 THEN 0\n        ELSE ROUND(SUM(t.total) / COUNT(DISTINCT t.ref_id), 2)\n    END as average_transaction_value\nFROM stores s\nLEFT JOIN transactions t ON s.id = t.store_id \n    AND t.transaction_type = 'Sale' \n    AND (t.is_cancelled IS NULL OR t.is_cancelled = false)\nGROUP BY s.name\nORDER BY average_transaction_value DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-06T21:33:12.203337"
  },
  {
    "question": "give me a pareto analysis of my products",
    "sql": "WITH product_sales AS (\n    SELECT \n        p.name AS product_name,\n        p.sku,\n        p.category,\n        SUM(ti.quantity) AS total_quantity_sold,\n        SUM(ti.item_total) AS total_revenue,\n        COUNT(DISTINCT ti.transaction_ref_id) AS transaction_count\n    FROM transaction_items ti\n    JOIN products p ON ti.product_id = p.id\n    JOIN transactions t ON ti.transaction_ref_id = t.ref_id\n    WHERE t.transaction_type = 'Sale' \n        AND (t.is_cancelled IS NULL OR t.is_cancelled = false)\n    GROUP BY p.id, p.name, p.sku, p.category\n),\nrevenue_totals AS (\n    SELECT \n        SUM(total_revenue) AS grand_total_revenue\n    FROM product_sales\n),\npareto_analysis AS (\n    SELECT \n        ps.product_name,\n        ps.sku,\n        ps.category,\n        ps.total_quantity_sold,\n        ps.total_revenue,\n        ps.transaction_count,\n        ROUND((ps.total_revenue / rt.grand_total_revenue) * 100, 2) AS revenue_percentage,\n        ROUND(SUM(ps.total_revenue) OVER (ORDER BY ps.total_revenue DESC) / rt.grand_total_revenue * 100, 2) AS cumulative_revenue_percentage,\n        ROW_NUMBER() OVER (ORDER BY ps.total_revenue DESC) AS revenue_rank\n    FROM product_sales ps\n    CROSS JOIN revenue_totals rt\n)\nSELECT \n    product_name,\n    sku,\n    category,\n    total_quantity_sold,\n    total_revenue,\n    transaction_count,\n    revenue_percentage,\n    cumulative_revenue_percentage,\n    revenue_rank,\n    CASE \n        WHEN cumulative_revenue_percentage <= 80 THEN 'A (Top 80%)'\n        WHEN cumulative_revenue_percentage <= 95 THEN 'B (Next 15%)'\n        ELSE 'C (Bottom 5%)'\n    END AS abc_classification\nFROM pareto_analysis\nORDER BY total_revenue DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-09T13:24:48.248235"
  },
  {
    "question": "sales per store yesterday compared to last week",
    "sql": "WITH date_ranges AS (\n    SELECT \n        CURRENT_DATE AT TIME ZONE 'Asia/Manila' - INTERVAL '1 day' AS yesterday,\n        CURRENT_DATE AT TIME ZONE 'Asia/Manila' - INTERVAL '8 days' AS last_week_same_day\n),\nyesterday_sales AS (\n    SELECT \n        s.name as store_name,\n        SUM(ti.item_total) as sales_amount\n    FROM transactions t\n    JOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN date_ranges d\n    WHERE t.transaction_type = 'Sale' \n        AND (t.is_cancelled IS NULL OR t.is_cancelled = FALSE)\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = DATE(d.yesterday)\n    GROUP BY s.name\n),\nlast_week_sales AS (\n    SELECT \n        s.name as store_name,\n        SUM(ti.item_total) as sales_amount\n    FROM transactions t\n    JOIN transaction_items ti ON ti.transaction_ref_id = t.ref_id\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN date_ranges d\n    WHERE t.transaction_type = 'Sale' \n        AND (t.is_cancelled IS NULL OR t.is_cancelled = FALSE)\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = DATE(d.last_week_same_day)\n    GROUP BY s.name\n)\nSELECT \n    COALESCE(ys.store_name, lw.store_name) as store_name,\n    COALESCE(ys.sales_amount, 0) as yesterday_sales,\n    COALESCE(lw.sales_amount, 0) as last_week_sales,\n    COALESCE(ys.sales_amount, 0) - COALESCE(lw.sales_amount, 0) as sales_difference,\n    CASE \n        WHEN COALESCE(lw.sales_amount, 0) = 0 THEN NULL\n        ELSE ROUND(((COALESCE(ys.sales_amount, 0) - COALESCE(lw.sales_amount, 0)) / lw.sales_amount) * 100, 2)\n    END as percent_change\nFROM yesterday_sales ys\nFULL OUTER JOIN last_week_sales lw ON ys.store_name = lw.store_name\nORDER BY sales_difference DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-13T18:33:09.477964"
  },
  {
    "question": "total transactions and average value per transaction per store yesterday vs last week",
    "sql": "WITH date_ranges AS (\n    SELECT \n        CURRENT_DATE AT TIME ZONE 'Asia/Manila' - INTERVAL '1 day' AS yesterday,\n        CURRENT_DATE AT TIME ZONE 'Asia/Manila' - INTERVAL '8 days' AS last_week_same_day\n),\nyesterday_stats AS (\n    SELECT \n        s.name as store_name,\n        COUNT(DISTINCT t.ref_id) as num_transactions,\n        ROUND(AVG(t.total), 2) as avg_transaction_value\n    FROM transactions t\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN date_ranges d\n    WHERE t.transaction_type = 'Sale' \n        AND (t.is_cancelled IS NULL OR t.is_cancelled = FALSE)\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = DATE(d.yesterday)\n    GROUP BY s.name\n),\nlast_week_stats AS (\n    SELECT \n        s.name as store_name,\n        COUNT(DISTINCT t.ref_id) as num_transactions,\n        ROUND(AVG(t.total), 2) as avg_transaction_value\n    FROM transactions t\n    JOIN stores s ON s.id = t.store_id\n    CROSS JOIN date_ranges d\n    WHERE t.transaction_type = 'Sale' \n        AND (t.is_cancelled IS NULL OR t.is_cancelled = FALSE)\n        AND DATE(t.transaction_time AT TIME ZONE 'Asia/Manila') = DATE(d.last_week_same_day)\n    GROUP BY s.name\n)\nSELECT \n    COALESCE(y.store_name, l.store_name) as store_name,\n    COALESCE(y.num_transactions, 0) as yesterday_transactions,\n    COALESCE(l.num_transactions, 0) as last_week_transactions,\n    COALESCE(y.avg_transaction_value, 0) as yesterday_avg_value,\n    COALESCE(l.avg_transaction_value, 0) as last_week_avg_value,\n    COALESCE(y.num_transactions, 0) - COALESCE(l.num_transactions, 0) as transaction_difference,\n    CASE \n        WHEN COALESCE(l.avg_transaction_value, 0) = 0 THEN NULL\n        ELSE ROUND(((COALESCE(y.avg_transaction_value, 0) - COALESCE(l.avg_transaction_value, 0)) / l.avg_transaction_value) * 100, 2)\n    END as avg_value_percent_change\nFROM yesterday_stats y\nFULL OUTER JOIN last_week_stats l ON y.store_name = l.store_name\nORDER BY yesterday_transactions DESC;",
    "feedback": "correct",
    "explanation": "",
    "timestamp": "2025-07-13T18:43:05.609156"
  }
]